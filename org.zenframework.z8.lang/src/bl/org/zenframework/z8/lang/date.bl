[primary "org.zenframework.z8.server.types.date"]
public final class date extends primary {
	static public date Min = '01/01/0001 00:00:00';
	static public date Max = '01/01/5000 00:00:00';

	static public date now();
	static public date today();
	static public date tomorrow();
	static public date yesterday();

	public operator string();
	public operator sql_date();

	public date operator + (datespan value);
	public date operator - (datespan value);
	public datespan operator - (date value);

	public bool operator < (date value);
	public bool operator > (date value);
	public bool operator <= (date value);
	public bool operator >= (date value);

	public bool operator == (date value);
	public bool operator != (date value);

	static public bool isEqualDate(date date1, date date2);

	public int ticks();

	public int year();
	public int quarter();
	public int month();
	public int weekOfYear();
	public int day();
	public int dayOfWeek();
	public int dayOfYear();
	public int daysInMonth();
	public int hours();
	public int minutes();
	public int seconds();
	public int milliseconds();
	public int zoneOffset();

	public void setDate(int year, int month, int day);
	public void setTime(int hour, int minute, int second);
	public void setTime(int hour, int minute, int second, int millisecond);
	public void setZoneOffset(int zoneOffset);

	public void set(int year, int month, int day, int hour, int minute, int second);
	public void set(int year, int month, int day, int hour, int minute, int second, int millisecond);

	public date addYear(int years);
	public date addQuarter(int quarters);
	public date addMonth(int months);
	public date addDay(int days);
	public date addHour(int hours);
	public date addMinute(int minutes);
	public date addSecond(int seconds);
	public date addMillisecond(int milliseconds);

	public date truncYear();
	public date truncQuarter();
	public date truncMonth();
	public date truncDay();
	public date truncHour();
	public date truncMinute();

	public string toString(string frm);

	/**
	Format      Description                                                               Example returned values
	------      -----------------------------------------------------------------------   -----------------------
		Y        A full numeric representation of a year, 4 digits                          Examples: 1999 or 2003
		y        A two digit representation of a year                                       Examples: 99 or 03
		o        Year number (identical to (Y), but if the ISO week number (W)              Examples: 1998 or 2004
					belongs to the previous or next year, that year is used instead)

		F        A full textual representation of a month, such as January or March         January to December
		M        A short textual representation of a month                                  Jan to Dec
		m        Numeric representation of a month, with leading zeros                      01 to 12
		n        Numeric representation of a month, without leading zeros                   1 to 12
		t        Number of days in the given month                                          28 to 31

		W        Week number of year, with leading zeros                                    01 to 53
		w        Week number of year, without leading zeros                                 1 to 53

		z        The day of the year (starting from 0)                                      0 to 364 (365 in leap years)
		N        Numeric representation of the day of the week                              1 (for Monday) through 7 (for Sunday)
		l        A full textual representation of the day of the week                       Monday to Sunday
		D        A short textual representation of the day of the week                      Mon to Sun
		d        Day of the month, 2 digits with leading zeros                              01 to 31
		j        Day of the month without leading zeros                                     1 to 31

		L        Whether it's a leap year                                                   1 if it is a leap year, 0 otherwise

		a        Lowercase Ante meridiem and Post meridiem                                  am or pm
		A        Uppercase Ante meridiem and Post meridiem                                  AM or PM

		g        12-hour format of an hour without leading zeros                            1 to 12
		G        24-hour format of an hour without leading zeros                            0 to 23
		h        12-hour format of an hour with leading zeros                               01 to 12
		H        24-hour format of an hour with leading zeros                               00 to 23
		i        Minutes, with leading zeros                                                00 to 59
		s        Seconds, with leading zeros                                                00 to 59
		S        Decimal fraction of a second                                               Examples:
					(minimum 1 digit, arbitrary number of digits allowed)                   001 (i.e. 0.001s) or
																							100 (i.e. 0.100s) or
																							999 (i.e. 0.999s) or
																							999876543210 (i.e. 0.999876543210s)
		O        Difference to Greenwich time (GMT) in hours and minutes                    Example: +1030
		P        Difference to Greenwich time (GMT) with colon between hours and minutes    Example: -08:00
		T        Timezone abbreviation of the machine running the code                      Examples: EST, MDT, PDT ...
		Z        Timezone offset in seconds (negative if west of UTC, positive if east)     -43200 to 50400
		c        ISO 8601 date represented as the local time with an offset to UTC appended.
					Notes:                                                                  Examples:
					1) If unspecified, the month / day defaults to the current              1991 or
						month / day, the time defaults to midnight, while the               1992-10 or
						timezone defaults to the browser's timezone. If a time              1993-09-20 or
						is specified, it must include both hours and minutes.               1994-08-19T16:20+01:00 or
						The "T" delimiter, seconds, milliseconds and timezone               1995-07-18T17:21:28-02:00 or
						are optional.
					2) The decimal fraction of a second, if specified,                      1996-06-17T18:22:29.98765+03:00 or
						must contain at least 1 digit (there is no limit                    1997-05-16T19:23:30,12345-0400 or
						to the maximum number of digits allowed), and may be                1998-04-15T20:24:31.2468Z or
						delimited by either a '.' or a ','. Refer to the                    1999-03-14T20:24:32Z or
						examples on the right for the various levels of                     2000-02-13T21:25:33
						date-time granularity which are supported, or see                   2001-01-12 22:26:34
						http://www.w3.org/TR/NOTE-datetime for more info.                   1962-06-17T09:21:34.125Z
		C        An ISO date string as implemented by the native Date object's
					[Date.toISOString](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
					method. This outputs the numeric part with *UTC* hour and minute
					values, and indicates this by appending the `'Z'` timezone
					indentifier.
		U        Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)                1193432466 or -2138434463
	*/

	static public date parse(string time);
	static public date parse(string string, string frm);
}
